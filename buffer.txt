require "socket"


class IP
  def initialize(prefix : Int16 | String, addr2 : Int16 : addr3 : Int16, addr4 : Int16)
    if typeof(prefix) == String
    	paramStrings = prefix.split('.')
    	params = [] of Int16
    	paramStrings.each do |param|
      	
    	return IP.new (
  	end
    @add1 : Int16 = prefix
    @addr2 : Int16 = addr2
    @addr3 : Int16 = addr3
    @addr4 : Int16 = addr4
    @validated : Bool = false
    @isValid
  end
  
  def validate() : Bool
    
  end
  
  def stringify() : String
    "#{addr1}.#{addr2}.#{addr3}.#{addr4}"
  end
end

ip : String
validIPs = [] of String

(0..255).each do |w|
  (0..255).each do |x|
    (0..255).each do |y|
      (0..255).each do |z|
        	ip = "#{w}.#{x}.#{y}.#{z}"
					validIPs.push ip if Socket.ip? ip
      end
    end
  end
end


spawn do
  puts "Hello!"
end

Fiber.yield

string = "43.42.24.42"
ints = string.split('.')
ints.each do |int|
  int = int.to_i16
end